// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia.Data;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(ApiVetContext))]
    [Migration("20231016235418_InitialMigrate")]
    partial class InitialMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Entities.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Hora")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("IdMascotaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdVeterinarioFk")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdMascotaFk");

                    b.HasIndex("IdVeterinarioFk");

                    b.ToTable("cita", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fecha = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hora = "09:00 AM",
                            IdMascotaFk = 1,
                            IdVeterinarioFk = 1,
                            Motivo = "Vacunación"
                        },
                        new
                        {
                            Id = 2,
                            Fecha = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hora = "11:30 AM",
                            IdMascotaFk = 2,
                            IdVeterinarioFk = 2,
                            Motivo = "Consulta General"
                        },
                        new
                        {
                            Id = 3,
                            Fecha = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hora = "03:15 PM",
                            IdMascotaFk = 3,
                            IdVeterinarioFk = 3,
                            Motivo = "Vacunación"
                        },
                        new
                        {
                            Id = 4,
                            Fecha = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hora = "02:00 PM",
                            IdMascotaFk = 4,
                            IdVeterinarioFk = 2,
                            Motivo = "Cirugía"
                        },
                        new
                        {
                            Id = 5,
                            Fecha = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hora = "10:45 AM",
                            IdMascotaFk = 5,
                            IdVeterinarioFk = 3,
                            Motivo = "Consulta General"
                        },
                        new
                        {
                            Id = 6,
                            Fecha = new DateTime(2023, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hora = "04:30 PM",
                            IdMascotaFk = 3,
                            IdVeterinarioFk = 4,
                            Motivo = "Vacunación"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Especie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("especie", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Perro"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Felina"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Conejo"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Ave"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Laboratorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("laboratorio", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Calle Veterinaria 123",
                            Nombre = "AnimalMed",
                            Telefono = "555-111-1111"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Avenida de Mascotas 456",
                            Nombre = "Genfar",
                            Telefono = "555-222-2222"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Carrera Animal 789",
                            Nombre = "PetCare Labs",
                            Telefono = "555-333-3333"
                        },
                        new
                        {
                            Id = 4,
                            Direccion = "Calle de Cuidados 567",
                            Nombre = "AnimalHealth Solutions",
                            Telefono = "555-444-4444"
                        },
                        new
                        {
                            Id = 5,
                            Direccion = "Avenida de Salud 321",
                            Nombre = "VetMedix",
                            Telefono = "555-555-5555"
                        },
                        new
                        {
                            Id = 6,
                            Direccion = "Carrera Bienestar 654",
                            Nombre = "AnimalWellness Labs",
                            Telefono = "555-666-6666"
                        },
                        new
                        {
                            Id = 7,
                            Direccion = "Calle de Farmacia 890",
                            Nombre = "AnimalPharmaceuticals",
                            Telefono = "555-777-7777"
                        },
                        new
                        {
                            Id = 8,
                            Direccion = "Avenida de Medicamentos 987",
                            Nombre = "VetRx",
                            Telefono = "555-888-8888"
                        },
                        new
                        {
                            Id = 9,
                            Direccion = "Carrera Innovación 123",
                            Nombre = "AnimalCare Innovations",
                            Telefono = "555-999-9999"
                        },
                        new
                        {
                            Id = 10,
                            Direccion = "Avenida Principal Animal",
                            Nombre = "BioVet",
                            Telefono = "555-123-4567"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Mascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdPropietarioFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRazaFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("IdPropietarioFk");

                    b.HasIndex("IdRazaFk");

                    b.ToTable("mascota", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaNacimiento = new DateTime(2019, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdPropietarioFk = 1,
                            IdRazaFk = 1,
                            Nombre = "Max"
                        },
                        new
                        {
                            Id = 2,
                            FechaNacimiento = new DateTime(2020, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdPropietarioFk = 2,
                            IdRazaFk = 2,
                            Nombre = "Luna"
                        },
                        new
                        {
                            Id = 3,
                            FechaNacimiento = new DateTime(2018, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdPropietarioFk = 1,
                            IdRazaFk = 4,
                            Nombre = "Rocky"
                        },
                        new
                        {
                            Id = 4,
                            FechaNacimiento = new DateTime(2019, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdPropietarioFk = 3,
                            IdRazaFk = 4,
                            Nombre = "Bella"
                        },
                        new
                        {
                            Id = 5,
                            FechaNacimiento = new DateTime(2017, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdPropietarioFk = 5,
                            IdRazaFk = 5,
                            Nombre = "Coco"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdLaboratorioFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<double>("Precio")
                        .HasColumnType("double");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLaboratorioFk");

                    b.ToTable("medicamento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdLaboratorioFk = 2,
                            Nombre = "PetRelief",
                            Precio = 10.99,
                            Stock = 100
                        },
                        new
                        {
                            Id = 2,
                            IdLaboratorioFk = 2,
                            Nombre = "AnimalGuardian",
                            Precio = 8.9900000000000002,
                            Stock = 75
                        },
                        new
                        {
                            Id = 3,
                            IdLaboratorioFk = 4,
                            Nombre = "VetMediCure",
                            Precio = 12.99,
                            Stock = 50
                        },
                        new
                        {
                            Id = 4,
                            IdLaboratorioFk = 5,
                            Nombre = "PetRxPlus",
                            Precio = 15.99,
                            Stock = 120
                        },
                        new
                        {
                            Id = 5,
                            IdLaboratorioFk = 6,
                            Nombre = "AnimalVitality",
                            Precio = 11.99,
                            Stock = 90
                        });
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentoProveedor", b =>
                {
                    b.Property<int>("IdMedicamentoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdProveedorFk")
                        .HasColumnType("int");

                    b.HasKey("IdMedicamentoFk", "IdProveedorFk");

                    b.HasIndex("IdProveedorFk");

                    b.ToTable("medicamentoProveedor", (string)null);

                    b.HasData(
                        new
                        {
                            IdMedicamentoFk = 1,
                            IdProveedorFk = 1
                        },
                        new
                        {
                            IdMedicamentoFk = 2,
                            IdProveedorFk = 1
                        },
                        new
                        {
                            IdMedicamentoFk = 3,
                            IdProveedorFk = 4
                        },
                        new
                        {
                            IdMedicamentoFk = 4,
                            IdProveedorFk = 3
                        },
                        new
                        {
                            IdMedicamentoFk = 5,
                            IdProveedorFk = 6
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Movimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdTipoMovimientoFk")
                        .HasColumnType("int");

                    b.Property<int>("Precio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoMovimientoFk");

                    b.ToTable("movimiento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 10,
                            FechaMovimiento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTipoMovimientoFk = 2,
                            Precio = 50
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 5,
                            FechaMovimiento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTipoMovimientoFk = 2,
                            Precio = 80
                        },
                        new
                        {
                            Id = 3,
                            Cantidad = 8,
                            FechaMovimiento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTipoMovimientoFk = 2,
                            Precio = 60
                        },
                        new
                        {
                            Id = 4,
                            Cantidad = 15,
                            FechaMovimiento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTipoMovimientoFk = 2,
                            Precio = 120
                        },
                        new
                        {
                            Id = 5,
                            Cantidad = 12,
                            FechaMovimiento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTipoMovimientoFk = 2,
                            Precio = 70
                        });
                });

            modelBuilder.Entity("Dominio.Entities.MovimientoMedicamento", b =>
                {
                    b.Property<int>("IdMedicamentoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdMovimientoFk")
                        .HasColumnType("int");

                    b.HasKey("IdMedicamentoFk", "IdMovimientoFk");

                    b.HasIndex("IdMovimientoFk");

                    b.ToTable("movimientoMedicamento", (string)null);

                    b.HasData(
                        new
                        {
                            IdMedicamentoFk = 1,
                            IdMovimientoFk = 1
                        },
                        new
                        {
                            IdMedicamentoFk = 2,
                            IdMovimientoFk = 2
                        },
                        new
                        {
                            IdMedicamentoFk = 3,
                            IdMovimientoFk = 3
                        },
                        new
                        {
                            IdMedicamentoFk = 4,
                            IdMovimientoFk = 4
                        },
                        new
                        {
                            IdMedicamentoFk = 5,
                            IdMovimientoFk = 5
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Propietario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("propietario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorreoElectronico = "juan.perez@example.com",
                            Nombre = "Juan Pérez",
                            Telefono = "555-123-4567"
                        },
                        new
                        {
                            Id = 2,
                            CorreoElectronico = "maria.rodriguez@example.com",
                            Nombre = "María Rodríguez",
                            Telefono = "555-987-6543"
                        },
                        new
                        {
                            Id = 3,
                            CorreoElectronico = "luis.gonzalez@example.com",
                            Nombre = "Luis González",
                            Telefono = "555-567-8901"
                        },
                        new
                        {
                            Id = 4,
                            CorreoElectronico = "ana.martinez@example.com",
                            Nombre = "Ana Martínez",
                            Telefono = "555-111-2222"
                        },
                        new
                        {
                            Id = 5,
                            CorreoElectronico = "carlos.sanchez@example.com",
                            Nombre = "Carlos Sánchez",
                            Telefono = "555-333-4444"
                        },
                        new
                        {
                            Id = 6,
                            CorreoElectronico = "laura.lopez@example.com",
                            Nombre = "Laura López",
                            Telefono = "555-555-6666"
                        },
                        new
                        {
                            Id = 7,
                            CorreoElectronico = "pedro.ramirez@example.com",
                            Nombre = "Pedro Ramírez",
                            Telefono = "555-777-8888"
                        },
                        new
                        {
                            Id = 8,
                            CorreoElectronico = "sofia.torres@example.com",
                            Nombre = "Sofía Torres",
                            Telefono = "555-999-0000"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("proveedor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Calle de Suministros 123",
                            Nombre = "AnimalPharma",
                            Telefono = "555-111-1111"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Avenida de Productos 456",
                            Nombre = "PetMedSupplies",
                            Telefono = "555-222-2222"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Carrera de Veterinaria 789",
                            Nombre = "VetSupplies Co.",
                            Telefono = "555-333-3333"
                        },
                        new
                        {
                            Id = 4,
                            Direccion = "Calle de Distribución 567",
                            Nombre = "AnimalHealth Distributors",
                            Telefono = "555-444-4444"
                        },
                        new
                        {
                            Id = 5,
                            Direccion = "Avenida de Farmacia 321",
                            Nombre = "PetPharmaceuticals Inc.",
                            Telefono = "555-555-5555"
                        },
                        new
                        {
                            Id = 6,
                            Direccion = "Carrera de Suministros 654",
                            Nombre = "AnimalCare Supplies",
                            Telefono = "555-666-6666"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Raza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdEspecieFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdEspecieFk");

                    b.ToTable("raza", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdEspecieFk = 1,
                            Nombre = "Golden Retriever"
                        },
                        new
                        {
                            Id = 2,
                            IdEspecieFk = 1,
                            Nombre = "Labrador Retriever"
                        },
                        new
                        {
                            Id = 3,
                            IdEspecieFk = 1,
                            Nombre = "Bulldog"
                        },
                        new
                        {
                            Id = 4,
                            IdEspecieFk = 2,
                            Nombre = "Siamese"
                        },
                        new
                        {
                            Id = 5,
                            IdEspecieFk = 2,
                            Nombre = "Maine Coon"
                        },
                        new
                        {
                            Id = 6,
                            IdEspecieFk = 3,
                            Nombre = "Holandés Enano"
                        },
                        new
                        {
                            Id = 7,
                            IdEspecieFk = 3,
                            Nombre = "Cabeza de León"
                        },
                        new
                        {
                            Id = 8,
                            IdEspecieFk = 4,
                            Nombre = "Canario"
                        },
                        new
                        {
                            Id = 9,
                            IdEspecieFk = 4,
                            Nombre = "Periquito"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tipomovimiento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Compra"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Venta"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.TratamientoMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Dosis")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FechaAdministracion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCitaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdMedicamentoFk")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdCitaFk");

                    b.HasIndex("IdMedicamentoFk");

                    b.ToTable("tratamientomedico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dosis = "2 tabletas",
                            FechaAdministracion = new DateTime(2023, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCitaFk = 2,
                            IdMedicamentoFk = 3,
                            Observacion = "Tomar después de las comidas"
                        },
                        new
                        {
                            Id = 2,
                            Dosis = "1 cápsula",
                            FechaAdministracion = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCitaFk = 1,
                            IdMedicamentoFk = 4,
                            Observacion = "Tomar con agua"
                        },
                        new
                        {
                            Id = 3,
                            Dosis = "3 ml",
                            FechaAdministracion = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCitaFk = 3,
                            IdMedicamentoFk = 5,
                            Observacion = "Inyectar en el músculo"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.UserRol", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("userRol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Veterinario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("veterinario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorreoElectronico = "juan.perez@example.com",
                            Especialidad = "Cirujano vascular",
                            Nombre = "Dr. Juan Pérez",
                            Telefono = "555-123-4567"
                        },
                        new
                        {
                            Id = 2,
                            CorreoElectronico = "maria.rodriguez@example.com",
                            Especialidad = "Cirujano vascular",
                            Nombre = "Dra. María Rodríguez",
                            Telefono = "555-987-6543"
                        },
                        new
                        {
                            Id = 3,
                            CorreoElectronico = "luis.gonzalez@example.com",
                            Especialidad = "Cardiología",
                            Nombre = "Dr. Luis González",
                            Telefono = "555-567-8901"
                        },
                        new
                        {
                            Id = 4,
                            CorreoElectronico = "ana.martinez@example.com",
                            Especialidad = "Cirujano vascular",
                            Nombre = "Dra. Ana Martínez",
                            Telefono = "555-111-2222"
                        },
                        new
                        {
                            Id = 5,
                            CorreoElectronico = "carlos.sanchez@example.com",
                            Especialidad = "Dermatología",
                            Nombre = "Dr. Carlos Sánchez",
                            Telefono = "555-333-4444"
                        },
                        new
                        {
                            Id = 6,
                            CorreoElectronico = "laura.lopez@example.com",
                            Especialidad = "Cirujano vascular",
                            Nombre = "Dra. Laura López",
                            Telefono = "555-555-6666"
                        },
                        new
                        {
                            Id = 7,
                            CorreoElectronico = "pedro.ramirez@example.com",
                            Especialidad = "Oftalmología",
                            Nombre = "Dr. Pedro Ramírez",
                            Telefono = "555-777-8888"
                        },
                        new
                        {
                            Id = 8,
                            CorreoElectronico = "sofia.torres@example.com",
                            Especialidad = "Cirujano vascular",
                            Nombre = "Dra. Sofía Torres",
                            Telefono = "555-999-0000"
                        },
                        new
                        {
                            Id = 9,
                            CorreoElectronico = "diego.mendoza@example.com",
                            Especialidad = "Neurología",
                            Nombre = "Dr. Diego Mendoza",
                            Telefono = "555-444-3333"
                        },
                        new
                        {
                            Id = 10,
                            CorreoElectronico = "patricia.gomez@example.com",
                            Especialidad = "Peluqueria",
                            Nombre = "Dra. Patricia Gómez",
                            Telefono = "555-222-1111"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Cita", b =>
                {
                    b.HasOne("Dominio.Entities.Mascota", "Mascota")
                        .WithMany("Citas")
                        .HasForeignKey("IdMascotaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Veterinario", "Veterinario")
                        .WithMany("Citas")
                        .HasForeignKey("IdVeterinarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");

                    b.Navigation("Veterinario");
                });

            modelBuilder.Entity("Dominio.Entities.Mascota", b =>
                {
                    b.HasOne("Dominio.Entities.Propietario", "Propietario")
                        .WithMany("Mascotas")
                        .HasForeignKey("IdPropietarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Raza", "Raza")
                        .WithMany("Mascotas")
                        .HasForeignKey("IdRazaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propietario");

                    b.Navigation("Raza");
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.HasOne("Dominio.Entities.Laboratorio", "Laboratorio")
                        .WithMany("Medicamentos")
                        .HasForeignKey("IdLaboratorioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratorio");
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentoProveedor", b =>
                {
                    b.HasOne("Dominio.Entities.Medicamento", "Medicamento")
                        .WithMany("MedicamentosProveedores")
                        .HasForeignKey("IdMedicamentoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Proveedor", "Proveedor")
                        .WithMany("MedicamentosProveedores")
                        .HasForeignKey("IdProveedorFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.Entities.Movimiento", b =>
                {
                    b.HasOne("Dominio.Entities.TipoMovimiento", "TipoMovimiento")
                        .WithMany("Movimientos")
                        .HasForeignKey("IdTipoMovimientoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoMovimiento");
                });

            modelBuilder.Entity("Dominio.Entities.MovimientoMedicamento", b =>
                {
                    b.HasOne("Dominio.Entities.Medicamento", "Medicamento")
                        .WithMany("MovimientosMedicamentos")
                        .HasForeignKey("IdMedicamentoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Movimiento", "Movimiento")
                        .WithMany("MovimientosMedicamentos")
                        .HasForeignKey("IdMovimientoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Movimiento");
                });

            modelBuilder.Entity("Dominio.Entities.Raza", b =>
                {
                    b.HasOne("Dominio.Entities.Especie", "Especie")
                        .WithMany("Razas")
                        .HasForeignKey("IdEspecieFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especie");
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.HasOne("Dominio.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.Entities.TratamientoMedico", b =>
                {
                    b.HasOne("Dominio.Entities.Cita", "Cita")
                        .WithMany("TratamientosMedicos")
                        .HasForeignKey("IdCitaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Medicamento", "Medicamento")
                        .WithMany("TratamientosMedicos")
                        .HasForeignKey("IdMedicamentoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Dominio.Entities.UserRol", b =>
                {
                    b.HasOne("Dominio.Entities.Rol", "Rol")
                        .WithMany("UsersRols")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.User", "Usuario")
                        .WithMany("UsersRols")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entities.Cita", b =>
                {
                    b.Navigation("TratamientosMedicos");
                });

            modelBuilder.Entity("Dominio.Entities.Especie", b =>
                {
                    b.Navigation("Razas");
                });

            modelBuilder.Entity("Dominio.Entities.Laboratorio", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Mascota", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.Navigation("MedicamentosProveedores");

                    b.Navigation("MovimientosMedicamentos");

                    b.Navigation("TratamientosMedicos");
                });

            modelBuilder.Entity("Dominio.Entities.Movimiento", b =>
                {
                    b.Navigation("MovimientosMedicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Propietario", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Navigation("MedicamentosProveedores");
                });

            modelBuilder.Entity("Dominio.Entities.Raza", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Navigation("UsersRols");
                });

            modelBuilder.Entity("Dominio.Entities.TipoMovimiento", b =>
                {
                    b.Navigation("Movimientos");
                });

            modelBuilder.Entity("Dominio.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UsersRols");
                });

            modelBuilder.Entity("Dominio.Entities.Veterinario", b =>
                {
                    b.Navigation("Citas");
                });
#pragma warning restore 612, 618
        }
    }
}
